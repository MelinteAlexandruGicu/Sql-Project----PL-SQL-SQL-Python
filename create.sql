-- Generated by Oracle SQL Developer Data Modeler 21.1.0.092.1221
--   at:        2022-05-08 22:11:25 EEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE echipa_de_club (
    id_club             NUMBER(3) NOT NULL,
    nume_echipa         VARCHAR2(50) NOT NULL,
    oras                VARCHAR2(30) NOT NULL,
    numar_jucatori      NUMBER(2) NOT NULL,
    antrenor_principal  VARCHAR2(50) NOT NULL,
    id_liga             NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE echipa_de_club
    ADD CONSTRAINT nume_echipa_ck CHECK ( length(nume_echipa) > 8
                                          AND REGEXP_LIKE ( nume_echipa,
                                                            '^[A-Za-z0-9 ]+$' ) );

ALTER TABLE echipa_de_club
    ADD CONSTRAINT oras_ck CHECK ( length(oras) > 3
                                   AND REGEXP_LIKE ( oras,
                                                     '^[A-Za-z ]+$' ) );

ALTER TABLE echipa_de_club
    ADD CONSTRAINT numar_jucatori_ck CHECK ( numar_jucatori BETWEEN 11 AND 38 );

ALTER TABLE echipa_de_club
    ADD CONSTRAINT antrenor_principal_ck CHECK ( length(antrenor_principal) > 5
                                                 AND REGEXP_LIKE ( antrenor_principal,
                                                                   '^[A-Za-z ]+$' ) );

ALTER TABLE echipa_de_club ADD CONSTRAINT echipa_de_club_pk PRIMARY KEY ( id_club );

ALTER TABLE echipa_de_club ADD CONSTRAINT key_2 UNIQUE ( nume_echipa );

CREATE TABLE echipa_nationala (
    tara                      VARCHAR2(15) NOT NULL,
    numar_jucatori_convocati  NUMBER(2) NOT NULL,
    nume_selectioner          VARCHAR2(30) NOT NULL,
    grupe_nationale_id        NUMBER NOT NULL
)
LOGGING;

ALTER TABLE echipa_nationala
    ADD CONSTRAINT tara_ck CHECK ( length(tara) >= 3
                                   AND REGEXP_LIKE ( tara,
                                                     '^[A-Z]+[ A-Z]+$' ) );

ALTER TABLE echipa_nationala
    ADD CONSTRAINT numar_jucatori_convocati_ck CHECK ( numar_jucatori_convocati BETWEEN 11 AND 32 );

ALTER TABLE echipa_nationala
    ADD CONSTRAINT nume_selectioner_ck CHECK ( length(nume_selectioner) > 5
                                               AND REGEXP_LIKE ( nume_selectioner,
                                                                 '[A-Z]{1}[A-Za-z-]+ [A-Z]{1}[A-Za-z-]+$' ) );

ALTER TABLE echipa_nationala ADD CONSTRAINT echipa_nationala_pk PRIMARY KEY ( tara );

CREATE OR REPLACE PACKAGE club AS 
	FUNCTION get_id_club(p_numeEchipa IN echipa_de_club.nume_echipa%TYPE) RETURN NUMBER;
	PROCEDURE insert_echipa_club(v_numeEchipa IN echipa_de_club.nume_echipa%TYPE, v_oras IN echipa_de_club.oras%TYPE, 
								v_nrJucatori IN echipa_de_club.numar_jucatori%TYPE, v_antrenor IN echipa_de_club.antrenor_principal%TYPE, v_tara IN echipa_nationala.tara%TYPE);
	PROCEDURE update_echipa_club(v_id IN echipa_de_club.id_club%TYPE, v_antrenor IN echipa_de_club.antrenor_principal%TYPE);
	PROCEDURE delete_echipa_club(v_id IN echipa_de_club.id_club%TYPE);
END club;
/

CREATE TABLE liga_de_fotbal (
    id_liga           NUMBER(2) NOT NULL,
    numar_liga        VARCHAR2(10) NOT NULL,
    numar_echipe      NUMBER(2) NOT NULL,
    numar_competitii  NUMBER(1) NOT NULL,
    tara              VARCHAR2(15) NOT NULL
)
LOGGING;

ALTER TABLE liga_de_fotbal
    ADD CONSTRAINT numar_liga_ck CHECK ( numar_liga IN ( 'Liga 1' ) );

ALTER TABLE liga_de_fotbal
    ADD CONSTRAINT numar_echipe_ck CHECK ( numar_echipe BETWEEN 16 AND 20 );

ALTER TABLE liga_de_fotbal
    ADD CONSTRAINT numar_competitii_ck CHECK ( numar_competitii BETWEEN 1 AND 3 );

ALTER TABLE liga_de_fotbal
    ADD CONSTRAINT "tara-liga_CK" CHECK ( length(tara) >= 3
                                          AND REGEXP_LIKE ( tara,
                                                            '^[A-Za-z]+[ A-Za-z]+$' ) );

ALTER TABLE liga_de_fotbal ADD CONSTRAINT liga_de_fotbal_pk PRIMARY KEY ( id_liga );

CREATE TABLE competitie (
    nume_competitie           VARCHAR2(30) NOT NULL,
    tip                       VARCHAR2(20) NOT NULL,
    numar_trofee_individuale  NUMBER(1),
    numar_trofee_colective    NUMBER(1) NOT NULL,
    numar_liga                VARCHAR2(10),
    grupe_nationale_id        NUMBER NOT NULL,
    id_liga                   NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE competitie
    ADD CHECK ( length(nume_competitie) > 8
                AND REGEXP_LIKE ( nume_competitie,
                                  '^[A-Za-z0-9 ]+$' ) );

ALTER TABLE competitie
    ADD CHECK ( tip IN ( 'Echipe de club', 'Echipe nationale' ) );

ALTER TABLE competitie ADD CONSTRAINT numar_tr_colective_ck CHECK ( numar_trofee_colective > 0 );

ALTER TABLE competitie ADD CONSTRAINT competitii_pk PRIMARY KEY ( nume_competitie );

CREATE TABLE grupe_nationale (
    grupe_nationale_id      NUMBER NOT NULL,
    numar_echipe_nationale  NUMBER(2) NOT NULL,
    continent               VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE grupe_nationale
    ADD CONSTRAINT numar_echipe_nationale_ck CHECK ( numar_echipe_nationale BETWEEN 0 AND 99 );

ALTER TABLE grupe_nationale
    ADD CONSTRAINT continent_ck CHECK ( continent IN ( 'Africa', 'America', 'Asia', 'Europa', 'Nu este nationala',
                                                       'Oceania_si_Australia' ) );

ALTER TABLE grupe_nationale ADD CONSTRAINT grupe_nationale_pk PRIMARY KEY ( grupe_nationale_id );

CREATE OR REPLACE PACKAGE competitii AS
	FUNCTION get_competitie(p_id IN liga_de_fotbal.id_liga%TYPE) RETURN VARCHAR2; 
	PROCEDURE insert_competitie(v_nume IN competitie.nume_competitie%TYPE, v_tip IN competitie.tip%TYPE, v_trofeeInd IN competitie.numar_trofee_individuale%TYPE, 
											  v_trofeeColec IN competitie.numar_trofee_colective%TYPE, v_tara IN echipa_nationala.tara%TYPE, v_continent grupe_nationale.continent%TYPE);
	PROCEDURE insert_competitieNat(v_nume IN competitie.nume_competitie%TYPE, v_tip IN competitie.tip%TYPE, v_trofeeInd IN competitie.numar_trofee_individuale%TYPE, 
											  v_trofeeColec IN competitie.numar_trofee_colective%TYPE, v_tara IN echipa_nationala.tara%TYPE, v_continent grupe_nationale.continent%TYPE);
END competitii;
/

CREATE TABLE jucator_de_fotbal (
    id_player      NUMBER(3) NOT NULL,
    nume_jucator   VARCHAR2(100) NOT NULL,
    data_nasterii  DATE NOT NULL,
    inaltime       NUMBER(3) NOT NULL,
    greutate       NUMBER(3) NOT NULL,
    pozitie        VARCHAR2(9) NOT NULL,
    numar_goluri   NUMBER(3) NOT NULL,
    numar_meciuri  NUMBER(3) NOT NULL,
    numar_tricou   NUMBER(2),
    convocare      VARCHAR2(10) NOT NULL,
    retras         VARCHAR2(2) NOT NULL,
    atuu           VARCHAR2(15),
    id_club        NUMBER(3) NOT NULL,
    tara           VARCHAR2(15) NOT NULL,
    id_liga        NUMBER NOT NULL
)
LOGGING;

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT nume_jucator_ck CHECK ( length(nume_jucator) > 5
                                           AND REGEXP_LIKE ( nume_jucator,
                                                             '^[A-Za-z ]+$' ) );

ALTER TABLE jucator_de_fotbal ADD CONSTRAINT inaltime_ck CHECK ( inaltime > 150 );

ALTER TABLE jucator_de_fotbal ADD CONSTRAINT greutate_ck CHECK ( greutate > 50 );

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT pozitie_ck CHECK ( pozitie IN ( 'atacant', 'fundas', 'mijlocas', 'portar' ) );

ALTER TABLE jucator_de_fotbal ADD CONSTRAINT numar_goluri_ck CHECK ( numar_goluri >= 0 );

ALTER TABLE jucator_de_fotbal ADD CONSTRAINT numar_meciuri_ck CHECK ( numar_meciuri >= 0 );

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT numar_tricou_ck CHECK ( numar_tricou BETWEEN 1 AND 99 );

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT convocare_ck CHECK ( convocare IN ( 'convocat', 'neconvocat' ) );

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT retras_ck CHECK ( retras IN ( 'da', 'nu' ) );

ALTER TABLE jucator_de_fotbal ADD CONSTRAINT jucator_de_fotbal_pk PRIMARY KEY ( id_player );

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT key_2v2 UNIQUE ( nume_jucator,
                                    retras,
                                    convocare );

CREATE TABLE trofee (
    individuale      NUMBER(2) NOT NULL,
    colective        NUMBER(2) NOT NULL,
    nume_competitie  VARCHAR2(30) NOT NULL,
    trofee_id        NUMBER NOT NULL,
    anul_trofeului   NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE trofee ADD CONSTRAINT individuale_ck CHECK ( individuale > 0 );

ALTER TABLE trofee ADD CONSTRAINT colective_ck CHECK ( colective > 0 );

ALTER TABLE trofee
    ADD CONSTRAINT nume_competitie_ck CHECK ( length(nume_competitie) > 8
                                              AND REGEXP_LIKE ( nume_competitie,
                                                                '[a-zA-Z0-9]' ) );

ALTER TABLE trofee
    ADD CONSTRAINT anul_trofeului_ck CHECK ( anul_trofeului BETWEEN 2000 AND 2020 );

ALTER TABLE trofee ADD CONSTRAINT trofee_pk PRIMARY KEY ( trofee_id );

CREATE OR REPLACE PACKAGE direct AS 
	PROCEDURE insert_directionare(v_id IN jucator_de_fotbal.id_player%TYPE, v_competitie IN competitie.nume_competitie%TYPE, v_an IN trofee.anul_trofeului%TYPE);
END direct;
/

CREATE OR REPLACE PACKAGE grupe AS 
	FUNCTION get_id_grupe(p_continent grupe_nationale.continent%TYPE) RETURN NUMBER;
	FUNCTION get_continent(p_nrEchipe IN grupe_nationale.numar_echipe_nationale%TYPE) RETURN VARCHAR2;
    PROCEDURE insert_grupe_nationale(v_nrEchipe IN grupe_nationale.numar_echipe_nationale%TYPE, v_continent IN grupe_nationale.continent%TYPE);
END grupe;
/

CREATE OR REPLACE PACKAGE jucator AS
	FUNCTION get_id_player(p_numeJucator IN jucator_de_fotbal.nume_jucator%TYPE) RETURN NUMBER;
	PROCEDURE insert_jucator(v_numeJucator IN jucator_de_fotbal.nume_jucator%TYPE, v_dataNasterii IN jucator_de_fotbal.data_nasterii%TYPE, v_inaltime IN jucator_de_fotbal.inaltime%TYPE, 
							 v_greutate IN jucator_de_fotbal.greutate%TYPE, v_pozitie IN jucator_de_fotbal.pozitie%TYPE, v_goluri IN jucator_de_fotbal.numar_goluri%TYPE, 
							 v_meciuri IN jucator_de_fotbal.numar_meciuri%TYPE, v_tricou IN jucator_de_fotbal.numar_tricou%TYPE,
							 v_convocare IN jucator_de_fotbal.convocare%TYPE, v_retras IN jucator_de_fotbal.retras%TYPE, v_atuu IN jucator_de_fotbal.atuu%TYPE,
							 v_echipa IN echipa_de_club.nume_echipa%TYPE, v_nume_selectioner IN echipa_nationala.nume_selectioner%TYPE, v_tara IN echipa_nationala.tara%TYPE);
	PROCEDURE primire_convocare(v_id IN jucator_de_fotbal.id_player%TYPE, v_convocare IN jucator_de_fotbal.convocare%TYPE);
END jucator;
/

CREATE OR REPLACE PACKAGE liga AS
	FUNCTION get_id_liga(p_tara IN echipa_nationala.tara%TYPE) RETURN NUMBER;
	FUNCTION get_numar_liga(p_tara IN echipa_nationala.tara%TYPE) RETURN VARCHAR2;	
    PROCEDURE insert_liga_de_fotbal(v_numar_liga IN liga_de_fotbal.numar_liga%TYPE DEFAULT 'Liga 1', v_nrEchipe IN liga_de_fotbal.numar_echipe%TYPE, 
								    v_nrComp IN liga_de_fotbal.numar_competitii%TYPE, v_nume_selectioner IN echipa_nationala.nume_selectioner%TYPE);
    PROCEDURE insert_liga_nationala(v_numar_liga IN liga_de_fotbal.numar_liga%TYPE DEFAULT 'Liga 1', v_nrEchipe IN liga_de_fotbal.numar_echipe%TYPE, 
								    v_nrComp IN liga_de_fotbal.numar_competitii%TYPE, v_nrEchipeNat IN grupe_nationale.numar_echipe_nationale%TYPE);
END liga;
/

CREATE OR REPLACE PACKAGE nationale AS
	FUNCTION get_tara(p_selectioner echipa_nationala.nume_selectioner%TYPE) RETURN VARCHAR2;
    PROCEDURE insert_echipa_nationala(v_tara IN echipa_nationala.tara%TYPE, v_nrJucatori IN echipa_nationala.numar_jucatori_convocati%TYPE, 
									 v_nume_selectioner IN echipa_nationala.nume_selectioner%TYPE, v_continent IN grupe_nationale.continent%TYPE);
END nationale;
/

CREATE TABLE palmares (
    premii_individuale  NUMBER(2) NOT NULL,
    numar_cupe          NUMBER(2) NOT NULL,
    id_player           NUMBER(3) NOT NULL,
    palmares_id         NUMBER NOT NULL
)
LOGGING;

ALTER TABLE palmares ADD CONSTRAINT premii_individuale_ck CHECK ( premii_individuale >= 0 );

ALTER TABLE palmares ADD CONSTRAINT numar_cupe_ck CHECK ( numar_cupe >= 0 );

CREATE UNIQUE INDEX palmares__idx ON
    palmares (
        id_player
    ASC )
        LOGGING;

ALTER TABLE palmares ADD CONSTRAINT palmares_pk PRIMARY KEY ( palmares_id );

CREATE OR REPLACE PACKAGE palmaresP AS
	FUNCTION get_id_palmares(p_id IN jucator_de_fotbal.id_player%TYPE) RETURN NUMBER;
	PROCEDURE insert_palmares(v_individuale IN palmares.premii_individuale%TYPE, v_cupe IN palmares.numar_cupe%TYPE, v_numeJucator IN jucator_de_fotbal.nume_jucator%TYPE);
END palmaresP;
/

CREATE OR REPLACE PACKAGE trofeu AS
	FUNCTION get_id_trofee(p_competitie IN competitie.nume_competitie%TYPE, p_an IN trofee.anul_trofeului%TYPE) RETURN NUMBER;
	PROCEDURE insert_trofee(v_individuale IN trofee.individuale%TYPE, v_colective IN trofee.colective%TYPE, v_id IN liga_de_fotbal.id_liga%TYPE, v_an IN trofee.anul_trofeului%TYPE);
END trofeu;
/

CREATE TABLE directionare (
    palmares_palmares_id  NUMBER NOT NULL,
    trofee_trofee_id      NUMBER NOT NULL
)
LOGGING;

ALTER TABLE directionare ADD CONSTRAINT "palmares-trofee_PK" PRIMARY KEY ( palmares_palmares_id,
                                                                           trofee_trofee_id );

ALTER TABLE directionare
    ADD CONSTRAINT directionare_trofee_fk FOREIGN KEY ( trofee_trofee_id )
        REFERENCES trofee ( trofee_id )
    NOT DEFERRABLE;

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT echipa_jucator_fk FOREIGN KEY ( id_club )
        REFERENCES echipa_de_club ( id_club )
    NOT DEFERRABLE;

ALTER TABLE competitie
    ADD CONSTRAINT "grupe-competitie_FK" FOREIGN KEY ( grupe_nationale_id )
        REFERENCES grupe_nationale ( grupe_nationale_id )
    NOT DEFERRABLE;

ALTER TABLE echipa_nationala
    ADD CONSTRAINT "Grupe-echipa_nat_FK" FOREIGN KEY ( grupe_nationale_id )
        REFERENCES grupe_nationale ( grupe_nationale_id )
    NOT DEFERRABLE;

ALTER TABLE palmares
    ADD CONSTRAINT "jucator-palmares_FK" FOREIGN KEY ( id_player )
        REFERENCES jucator_de_fotbal ( id_player )
    NOT DEFERRABLE;

ALTER TABLE competitie
    ADD CONSTRAINT "liga-competitie_FK" FOREIGN KEY ( id_liga )
        REFERENCES liga_de_fotbal ( id_liga )
    NOT DEFERRABLE;

ALTER TABLE echipa_de_club
    ADD CONSTRAINT "liga-echipa_FK" FOREIGN KEY ( id_liga )
        REFERENCES liga_de_fotbal ( id_liga )
    NOT DEFERRABLE;

ALTER TABLE jucator_de_fotbal
    ADD CONSTRAINT nationala_jucator_fk FOREIGN KEY ( tara )
        REFERENCES echipa_nationala ( tara )
    NOT DEFERRABLE;

ALTER TABLE directionare
    ADD CONSTRAINT "palmares-dir_FK" FOREIGN KEY ( palmares_palmares_id )
        REFERENCES palmares ( palmares_id )
    NOT DEFERRABLE;

ALTER TABLE trofee
    ADD CONSTRAINT "trofee-comp_FK" FOREIGN KEY ( nume_competitie )
        REFERENCES competitie ( nume_competitie )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER retras_neconvocatTrg 
    BEFORE UPDATE ON jucator_de_fotbal 
    FOR EACH ROW 
BEGIN
    IF :new.convocare = 'convocat' AND :new.retras = 'da'
    THEN
        RAISE_APPLICATION_ERROR (-20508, 'Un jucator retras din activitate nu poate fi convocat la o echipa nationala!');
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER selectioner_antrenor 
    BEFORE UPDATE ON echipa_nationala 
    FOR EACH ROW 
DECLARE
	CURSOR c1 IS
    SELECT antrenor_principal FROM echipa_de_club;
	v_nume echipa_de_club.antrenor_principal%TYPE;
	bad_coach EXCEPTION;
BEGIN
    OPEN C1;
LOOP
    FETCH C1 INTO v_nume;
	IF :new.nume_selectioner = v_nume
	THEN
		RAISE bad_coach;
	END IF;
END LOOP;
    CLOSE C1;
EXCEPTION
	WHEN bad_coach THEN
		RAISE_APPLICATION_ERROR (-20508, 'Un selectioner nu poate antrena si echipa de club si nationala');
END selectioner_antrenor; 
/

CREATE OR REPLACE TRIGGER Trg2_jucator_de_fotbal 
    BEFORE INSERT OR UPDATE ON jucator_de_fotbal 
    FOR EACH ROW 
BEGIN
	IF( :new.data_nasterii >= SYSDATE )
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'DATA INVALIDA: ' || TO_CHAR( :new.data_nasterii, 'DD.MM.YYYY') || ' trebuie sa fie mai mica decat data curenta.' );
	END IF;
END; 
/

CREATE OR REPLACE PACKAGE BODY club AS

    FUNCTION get_id_club (
        p_numeechipa IN echipa_de_club.nume_echipa%TYPE
    ) RETURN NUMBER AS
        v_id_club echipa_de_club.id_club%TYPE;
    BEGIN
        SELECT
            id_club
        INTO v_id_club
        FROM
            echipa_de_club
        WHERE
            nume_echipa = p_numeechipa;

        RETURN v_id_club;
    END get_id_club;

    PROCEDURE update_echipa_club (
        v_id        IN  echipa_de_club.id_club%TYPE,
        v_antrenor  IN  echipa_de_club.antrenor_principal%TYPE
    ) IS
    BEGIN
        UPDATE echipa_de_club
        SET
            antrenor_principal = v_antrenor
        WHERE
            id_club = v_id;

    END update_echipa_club;

    PROCEDURE delete_echipa_club (
        v_id IN echipa_de_club.id_club%TYPE
    ) IS
    BEGIN
        DELETE FROM echipa_de_club
        WHERE
            id_club = v_id;

    END delete_echipa_club;

    PROCEDURE insert_echipa_club (
        v_numeechipa  IN  echipa_de_club.nume_echipa%TYPE,
        v_oras        IN  echipa_de_club.oras%TYPE,
        v_nrjucatori  IN  echipa_de_club.numar_jucatori%TYPE,
        v_antrenor    IN  echipa_de_club.antrenor_principal%TYPE,
        v_tara        IN  echipa_nationala.tara%TYPE
    ) IS
    BEGIN
        INSERT INTO echipa_de_club VALUES (
            NULL,
            v_numeechipa,
            v_oras,
            v_nrjucatori,
            v_antrenor,
            liga.get_id_liga(v_tara)
        );

    END insert_echipa_club;

END club;
/

CREATE OR REPLACE PACKAGE BODY competitii AS

    FUNCTION get_competitie (
        p_id IN liga_de_fotbal.id_liga%TYPE
    ) RETURN VARCHAR2 AS
        v_competitie competitie.nume_competitie%TYPE;
    BEGIN
        SELECT
            nume_competitie
        INTO v_competitie
        FROM
            competitie
        WHERE
            id_liga = p_id;

        RETURN v_competitie;
    END get_competitie;

    PROCEDURE insert_competitie (
        v_nume         IN  competitie.nume_competitie%TYPE,
        v_tip          IN  competitie.tip%TYPE,
        v_trofeeind    IN  competitie.numar_trofee_individuale%TYPE,
        v_trofeecolec  IN  competitie.numar_trofee_colective%TYPE,
        v_tara         IN  echipa_nationala.tara%TYPE,
        v_continent    grupe_nationale.continent%TYPE
    ) IS
    BEGIN
        INSERT INTO competitie VALUES (
            v_nume,
            v_tip,
            v_trofeeind,
            v_trofeecolec,
            liga.get_numar_liga(v_tara),
            grupe.get_id_grupe(v_continent),
            liga.get_id_liga(v_tara)
        );

    END insert_competitie;

    PROCEDURE insert_competitienat (
        v_nume         IN  competitie.nume_competitie%TYPE,
        v_tip          IN  competitie.tip%TYPE,
        v_trofeeind    IN  competitie.numar_trofee_individuale%TYPE,
        v_trofeecolec  IN  competitie.numar_trofee_colective%TYPE,
        v_tara         IN  echipa_nationala.tara%TYPE,
        v_continent    grupe_nationale.continent%TYPE
    ) IS
    BEGIN
        INSERT INTO competitie VALUES (
            v_nume,
            v_tip,
            v_trofeeind,
            v_trofeecolec,
            NULL,
            grupe.get_id_grupe(v_continent),
            liga.get_id_liga(v_tara)
        );

    END insert_competitienat;

END competitii;
/

CREATE OR REPLACE PACKAGE BODY direct AS

    PROCEDURE insert_directionare (
        v_id          IN  jucator_de_fotbal.id_player%TYPE,
        v_competitie  IN  competitie.nume_competitie%TYPE,
        v_an          IN  trofee.anul_trofeului%TYPE
    ) IS
    BEGIN
        INSERT INTO directionare VALUES (
            palmaresp.get_id_palmares(v_id),
            trofeu.get_id_trofee(v_competitie, v_an)
        );

    END insert_directionare;

END direct;
/

CREATE OR REPLACE PACKAGE BODY grupe AS

    FUNCTION get_id_grupe (
        p_continent grupe_nationale.continent%TYPE
    ) RETURN NUMBER AS
        v_id grupe_nationale.grupe_nationale_id%TYPE;
    BEGIN
        SELECT
            grupe_nationale_id
        INTO v_id
        FROM
            grupe_nationale
        WHERE
            continent = p_continent;

        RETURN v_id;
    END get_id_grupe;

    FUNCTION get_continent (
        p_nrechipe IN grupe_nationale.numar_echipe_nationale%TYPE
    ) RETURN VARCHAR2 AS
        v_continent grupe_nationale.continent%TYPE;
    BEGIN
        SELECT
            continent
        INTO v_continent
        FROM
            grupe_nationale
        WHERE
            numar_echipe_nationale = p_nrechipe;

        RETURN v_continent;
    END get_continent;

    PROCEDURE insert_grupe_nationale (
        v_nrechipe   IN  grupe_nationale.numar_echipe_nationale%TYPE,
        v_continent  IN  grupe_nationale.continent%TYPE
    ) IS
    BEGIN
        INSERT INTO grupe_nationale VALUES (
            NULL,
            v_nrechipe,
            v_continent
        );

    END insert_grupe_nationale;

END grupe;
/

CREATE OR REPLACE PACKAGE BODY jucator AS

    FUNCTION get_id_player (
        p_numejucator IN jucator_de_fotbal.nume_jucator%TYPE
    ) RETURN NUMBER AS
        v_id_player jucator_de_fotbal.id_player%TYPE;
    BEGIN
        SELECT
            id_player
        INTO v_id_player
        FROM
            jucator_de_fotbal
        WHERE
            nume_jucator = p_numejucator;

        RETURN v_id_player;
    END get_id_player;

    PROCEDURE insert_jucator (
        v_numejucator       IN  jucator_de_fotbal.nume_jucator%TYPE,
        v_datanasterii      IN  jucator_de_fotbal.data_nasterii%TYPE,
        v_inaltime          IN  jucator_de_fotbal.inaltime%TYPE,
        v_greutate          IN  jucator_de_fotbal.greutate%TYPE,
        v_pozitie           IN  jucator_de_fotbal.pozitie%TYPE,
        v_goluri            IN  jucator_de_fotbal.numar_goluri%TYPE,
        v_meciuri           IN  jucator_de_fotbal.numar_meciuri%TYPE,
        v_tricou            IN  jucator_de_fotbal.numar_tricou%TYPE,
        v_convocare         IN  jucator_de_fotbal.convocare%TYPE,
        v_retras            IN  jucator_de_fotbal.retras%TYPE,
        v_atuu              IN  jucator_de_fotbal.atuu%TYPE,
        v_echipa            IN  echipa_de_club.nume_echipa%TYPE,
        v_nume_selectioner  IN  echipa_nationala.nume_selectioner%TYPE,
        v_tara              IN  echipa_nationala.tara%TYPE
    ) IS
    BEGIN
        INSERT INTO jucator_de_fotbal VALUES (
            NULL,
            v_numejucator,
            v_datanasterii,
            v_inaltime,
            v_greutate,
            v_pozitie,
            v_goluri,
            v_meciuri,
            v_tricou,
            v_convocare,
            v_retras,
            v_atuu,
            club.get_id_club(v_echipa),
            nationale.get_tara(v_nume_selectioner),
            liga.get_id_liga(v_tara)
        );

    END insert_jucator;

    PROCEDURE primire_convocare (
        v_id         IN  jucator_de_fotbal.id_player%TYPE,
        v_convocare  IN  jucator_de_fotbal.convocare%TYPE
    ) IS
    BEGIN
        UPDATE jucator_de_fotbal
        SET
            convocare = v_convocare
        WHERE
            id_player = v_id;

    END primire_convocare;

END jucator;
/

CREATE OR REPLACE PACKAGE BODY liga AS

    FUNCTION get_id_liga (
        p_tara IN echipa_nationala.tara%TYPE
    ) RETURN NUMBER AS
        v_id liga_de_fotbal.id_liga%TYPE;
    BEGIN
        SELECT
            id_liga
        INTO v_id
        FROM
            liga_de_fotbal
        WHERE
            tara = p_tara;

        RETURN v_id;
    END get_id_liga;

    FUNCTION get_numar_liga (
        p_tara IN echipa_nationala.tara%TYPE
    ) RETURN VARCHAR2 AS
        v_numar_liga liga_de_fotbal.numar_liga%TYPE;
    BEGIN
        SELECT
            numar_liga
        INTO v_numar_liga
        FROM
            liga_de_fotbal
        WHERE
            tara = p_tara;

        RETURN v_numar_liga;
    END get_numar_liga;

    PROCEDURE insert_liga_de_fotbal (
        v_numar_liga        IN  liga_de_fotbal.numar_liga%TYPE DEFAULT 'Liga 1',
        v_nrechipe          IN  liga_de_fotbal.numar_echipe%TYPE,
        v_nrcomp            IN  liga_de_fotbal.numar_competitii%TYPE,
        v_nume_selectioner  IN  echipa_nationala.nume_selectioner%TYPE
    ) IS
    BEGIN
        INSERT INTO liga_de_fotbal VALUES (
            NULL,
            v_numar_liga,
            v_nrechipe,
            v_nrcomp,
            nationale.get_tara(v_nume_selectioner)
        );

    END insert_liga_de_fotbal;

    PROCEDURE insert_liga_nationala (
        v_numar_liga   IN  liga_de_fotbal.numar_liga%TYPE DEFAULT 'Liga 1',
        v_nrechipe     IN  liga_de_fotbal.numar_echipe%TYPE,
        v_nrcomp       IN  liga_de_fotbal.numar_competitii%TYPE,
        v_nrechipenat  IN  grupe_nationale.numar_echipe_nationale%TYPE
    ) IS
    BEGIN
        INSERT INTO liga_de_fotbal VALUES (
            NULL,
            v_numar_liga,
            v_nrechipe,
            v_nrcomp,
            grupe.get_continent(v_nrechipenat)
        );

    END insert_liga_nationala;

END liga;
/

CREATE OR REPLACE PACKAGE BODY nationale AS

    FUNCTION get_tara (
        p_selectioner echipa_nationala.nume_selectioner%TYPE
    ) RETURN VARCHAR2 AS
        v_tara echipa_nationala.tara%TYPE;
    BEGIN
        SELECT
            tara
        INTO v_tara
        FROM
            echipa_nationala
        WHERE
            nume_selectioner = p_selectioner;

        RETURN v_tara;
    END get_tara;

    PROCEDURE insert_echipa_nationala (
        v_tara              IN  echipa_nationala.tara%TYPE,
        v_nrjucatori        IN  echipa_nationala.numar_jucatori_convocati%TYPE,
        v_nume_selectioner  IN  echipa_nationala.nume_selectioner%TYPE,
        v_continent         IN  grupe_nationale.continent%TYPE
    ) IS
    BEGIN
        INSERT INTO echipa_nationala VALUES (
            v_tara,
            v_nrjucatori,
            v_nume_selectioner,
            grupe.get_id_grupe(v_continent)
        );

    END insert_echipa_nationala;

END nationale;
/

CREATE OR REPLACE PACKAGE BODY palmaresp AS

    FUNCTION get_id_palmares (
        p_id IN jucator_de_fotbal.id_player%TYPE
    ) RETURN NUMBER AS
        v_id palmares.palmares_id%TYPE;
    BEGIN
        SELECT
            palmares_id
        INTO v_id
        FROM
            palmares
        WHERE
            id_player = p_id;

        RETURN v_id;
    END get_id_palmares;

    PROCEDURE insert_palmares (
        v_individuale  IN  palmares.premii_individuale%TYPE,
        v_cupe         IN  palmares.numar_cupe%TYPE,
        v_numejucator  IN  jucator_de_fotbal.nume_jucator%TYPE
    ) IS
    BEGIN
        INSERT INTO palmares VALUES (
            v_individuale,
            v_cupe,
            jucator.get_id_player(v_numejucator),
            NULL
        );

    END insert_palmares;

END palmaresp;
/

CREATE OR REPLACE PACKAGE BODY trofeu AS

    FUNCTION get_id_trofee (
        p_competitie  IN  competitie.nume_competitie%TYPE,
        p_an          IN  trofee.anul_trofeului%TYPE
    ) RETURN NUMBER AS
        v_id trofee.trofee_id%TYPE;
    BEGIN
        SELECT
            trofee_id
        INTO v_id
        FROM
            trofee
        WHERE
                nume_competitie = p_competitie
            AND anul_trofeului = p_an;

        RETURN v_id;
    END get_id_trofee;

    PROCEDURE insert_trofee (
        v_individuale  IN  trofee.individuale%TYPE,
        v_colective    IN  trofee.colective%TYPE,
        v_id           IN  liga_de_fotbal.id_liga%TYPE,
        v_an           IN  trofee.anul_trofeului%TYPE
    ) IS
    BEGIN
        INSERT INTO trofee VALUES (
            v_individuale,
            v_colective,
            competitii.get_competitie(v_id),
            NULL,
            v_an
        );

    END insert_trofee;

END trofeu;
/

CREATE SEQUENCE echipa_de_club_id_club_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER echipa_de_club_id_club_trg BEFORE
    INSERT ON echipa_de_club
    FOR EACH ROW
    WHEN ( new.id_club IS NULL )
BEGIN
    :new.id_club := echipa_de_club_id_club_seq.nextval;
END;
/

CREATE SEQUENCE grupe_nationale_grupe_national START WITH 1 MINVALUE 1 MAXVALUE 999 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER grupe_nationale_grupe_national BEFORE
    INSERT ON grupe_nationale
    FOR EACH ROW
    WHEN ( new.grupe_nationale_id IS NULL )
BEGIN
    :new.grupe_nationale_id := grupe_nationale_grupe_national.nextval;
END;
/

CREATE SEQUENCE jucator_de_fotbal_id_player START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER jucator_de_fotbal_id_player BEFORE
    INSERT ON jucator_de_fotbal
    FOR EACH ROW
    WHEN ( new.id_player IS NULL )
BEGIN
    :new.id_player := jucator_de_fotbal_id_player.nextval;
END;
/

CREATE SEQUENCE liga_de_fotbal_id_liga_seq START WITH 1 MINVALUE 1 MAXVALUE 99 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER liga_de_fotbal_id_liga_trg BEFORE
    INSERT ON liga_de_fotbal
    FOR EACH ROW
    WHEN ( new.id_liga IS NULL )
BEGIN
    :new.id_liga := liga_de_fotbal_id_liga_seq.nextval;
END;
/

CREATE SEQUENCE palmares_palmares_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER palmares_palmares_id_trg BEFORE
    INSERT ON palmares
    FOR EACH ROW
    WHEN ( new.palmares_id IS NULL )
BEGIN
    :new.palmares_id := palmares_palmares_id_seq.nextval;
END;
/

CREATE SEQUENCE trofee_trofee_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER trofee_trofee_id_trg BEFORE
    INSERT ON trofee
    FOR EACH ROW
    WHEN ( new.trofee_id IS NULL )
BEGIN
    :new.trofee_id := trofee_trofee_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             9
-- CREATE INDEX                             1
-- ALTER TABLE                             52
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           9
-- CREATE PACKAGE BODY                      9
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           9
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          6
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
